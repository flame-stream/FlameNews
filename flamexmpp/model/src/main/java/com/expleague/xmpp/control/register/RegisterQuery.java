//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.12 at 12:05:07 AM MSK 
//


package com.expleague.xmpp.control.register;

import com.expleague.xmpp.stanza.data.X;
import com.expleague.commons.random.FastRandom;

import javax.xml.bind.annotation.*;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice minOccurs="0">
 *           &lt;sequence minOccurs="0">
 *             &lt;element name="registered" type="{jabber:iq:register}empty" minOccurs="0"/>
 *             &lt;element name="instructions" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="username" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="nick" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="password" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="first" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="last" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="email" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="address" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="city" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="state" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="zip" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="phone" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="url" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="date" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="misc" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="text" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *             &lt;element name="key" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *           &lt;/sequence>
 *           &lt;element name="remove" type="{jabber:iq:register}empty" minOccurs="0"/>
 *         &lt;/choice>
 *         &lt;element ref="{jabber:x:data}x" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "registered",
    "instructions",
    "username",
    "nick",
    "password",
    "name",
    "first",
    "last",
    "email",
    "address",
    "city",
    "state",
    "zip",
    "phone",
    "url",
    "date",
    "misc",
    "text",
    "key",
    "remove",
    "x"
})
@XmlRootElement(name = "query", namespace = "jabber:iq:register")
public class RegisterQuery {
    @XmlElement(namespace = "jabber:iq:register")
    protected String registered;
    @XmlElement(namespace = "jabber:iq:register")
    protected String instructions;
    @XmlElement(namespace = "jabber:iq:register")
    protected String username;
    @XmlElement(namespace = "jabber:iq:register")
    protected String nick;
    @XmlElement(namespace = "jabber:iq:register")
    protected String password;
    @XmlElement(namespace = "jabber:iq:register")
    protected String name;
    @XmlElement(namespace = "jabber:iq:register")
    protected String first;
    @XmlElement(namespace = "jabber:iq:register")
    protected String last;
    @XmlElement(namespace = "jabber:iq:register")
    protected String email;
    @XmlElement(namespace = "jabber:iq:register")
    protected String address;
    @XmlElement(namespace = "jabber:iq:register")
    protected String city;
    @XmlElement(namespace = "jabber:iq:register")
    protected String state;
    @XmlElement(namespace = "jabber:iq:register")
    protected String zip;
    @XmlElement(namespace = "jabber:iq:register")
    protected String phone;
    @XmlElement(namespace = "jabber:iq:register")
    protected String url;
    @XmlElement(namespace = "jabber:iq:register")
    protected String date;
    @XmlElement(namespace = "jabber:iq:register")
    protected String misc;
    @XmlElement(namespace = "jabber:iq:register")
    protected String text;
    @XmlElement(namespace = "jabber:iq:register")
    protected String key;
    @XmlElement(namespace = "jabber:iq:register")
    protected String remove;
    protected X x;

  public RegisterQuery() {}
  public RegisterQuery(String local, boolean expert) {
    username = local;
    password = new FastRandom(local.hashCode()).nextBase64String(10);
    email = expert ? "fake/expert" : "fake";
  }

  public boolean isEmpty() {
        return registered == null
            && instructions == null
            && username == null
            && nick == null
            && password == null
            && first == null
            && last == null
            && email == null
            && address == null
            && city == null
            && zip == null
            && state == null
            && phone == null
            && url == null
            && date == null
            && misc == null
            && text == null
            && key == null
            && remove == null
            && x == null;
    }

  public static RegisterQuery requiredFields() {
    final RegisterQuery query = new RegisterQuery();
    query.username = "";
    query.password = "";
    query.instructions = "Choose user name and password";
    return query;
  }

  public void name(String name) {
    this.name = name;
  }

  public void passwd(String passwd) {
    this.password = passwd;
  }

  public String name() {
    return name;
  }

  public String passwd() {
    return password;
  }

  public void username(String name) {
    username = name;
  }

  public String username() {
    final int dogIndex = username.indexOf('@');
    return dogIndex >= 0 ? username.substring(0, dogIndex) : username;
  }

  public String avatar() {
    return misc;
  }

  public String city() {
    return city;
  }

  public String country() {
    return state;
  }

  public int age() {
    return text != null ? Integer.parseInt(text.split("\\s+")[0]) : 0;
  }

  public int sex() {
    return text != null ? Integer.parseInt(text.split("\\s+")[1]) : 0;
  }

  public String platform() {
    return email;
  }

  public boolean expert() {
    return platform() != null && platform().endsWith("/expert");
  }

  public boolean trusted() {
    return platform() != null && platform().endsWith("/admin/expert");
  }
}
